@model MESACCA.ViewModels.Member.EditAccountViewModel
@{
    ViewData["Title"] = "Edit Account";
}
<h2>Edit Account</h2>
@if (ViewBag.Message != null)
{
    <span class="text-danger">@ViewBag.Message</span>
}
@using (Html.BeginForm("EditAccount", "Member", FormMethod.Post, new { @class = "form-horizontal", role = "form" }))
{
    @*Adding a return button for the User*@
    <div class="form-actions">
        <a href="@Url.Action("ManageAccounts", "Member")" style="margin-bottom:10px" , class="btn btn-primary">Back to Manage Accounts</a>
    </div>
    @*Adding First Name textfield*@
    <div class="form-group">
        @Html.LabelFor(model => model.FirstName, new { @class = "col-md-2 control-label" })
        @Html.TextBoxFor(model => model.FirstName, new { @class = "form-control", value = Model.FirstName })
        <div class="col-md-offset-2">
            <small class="text-muted">35 character limit.</small>
        </div>
        <font color="red">
            @Html.ValidationMessageFor(model => model.FirstName)
        </font>
    </div>
    @*Adding Last Name textfield*@
    <div class="form-group">
        @Html.LabelFor(model => model.LastName, new { @class = "col-md-2 control-label" })
        @Html.TextBoxFor(model => model.LastName, new { @class = "form-control", value = Model.LastName })
        <div class="col-md-offset-2">
            <small class="text-muted">35 character limit.</small>
        </div>
        <font color="red">
            @Html.ValidationMessageFor(model => model.LastName)
        </font>
    </div>
    @*@Adding a inline Account Type dropbox*@
    if (ViewData["EditorAccountType"].Equals("Admin"))
    {
        <div class="form-group">
            <div class="form-inline">
                @Html.LabelFor(model => model.AccountType, new { @class = "col-md-2 control-label" })
                <div class="form-control">
                    @Html.DropDownList("AccountType", new List<SelectListItem>
                    {
                        new SelectListItem {Text ="Director", Value="Director" },
                        new SelectListItem {Text ="Staff", Value="Staff" }
                    })
                </div>
            </div>
            <div class="col-md-offset-2">
                <small class="text-muted">Example: Director, Staff</small>
            </div>
            <font color="red">
                @Html.ValidationMessageFor(model => model.AccountType)
            </font>
        </div>
    }
    else if (ViewData["EditorAccountType"].Equals("Director"))
    { 
        @*@Adding readonly Center textfield*@
        <div class="form-group">
            @Html.LabelFor(model => model.AccountType, new { @class = "col-md-2 control-label" })
            @Html.TextBoxFor(model => model.AccountType, new { @class = "form-control", @readonly = "readonly", style = "background-color:#CCCCCC" })
        </div>
    }

    if (ViewData["EditorAccountType"].Equals("Admin"))
    {
        @*Adding a inline Center dropbox*@
        <div class="form-group">
            <div class="form-inline">
                @Html.LabelFor(model => model.Center, new { @class = "col-md-2 control-label" })
                <div class="form-control">
                    @Html.DropDownList("Center", (SelectList)ViewData["centerNamesList"])
                </div>
            </div>
            <div class="col-md-offset-2">
                <small class="text-muted">Current centers in the database</small>
            </div>
            <font color="red">
                @Html.ValidationMessageFor(model => model.Center)
            </font>
        </div>
    }
    else if (ViewData["EditorAccountType"].Equals("Director"))
    {
        @*@Adding readonly Center textfield*@
        <div class="form-group">
            @Html.LabelFor(model => model.Center, new { @class = "col-md-2 control-label" })
            @Html.TextBoxFor(model => model.Center, new { @class = "form-control", @readonly = "readonly", style = "background-color:#CCCCCC" })
        </div>
    }
    @*Adding Email textfield*@
    <div class="form-group">
        @Html.LabelFor(model => model.Email, new { @class = "col-md-2 control-label" })
        @Html.TextBoxFor(model => model.Email, new { @class = "form-control", value = Model.Email })
        <div class="col-md-offset-2">
            <small class="text-muted">Example: mesa@yahoo.com. 30 character limit.</small>
        </div>
        <font color="red">
            @Html.ValidationMessageFor(model => model.Email)
        </font>
    </div>
    @*Adding Phone Number textfield*@
    <div class="form-group">
        @Html.LabelFor(model => model.PhoneNumber, new { @class = "col-md-2 control-label" })
        @Html.TextBoxFor(model => model.PhoneNumber, new { @class = "form-control", value = Model.PhoneNumber })
        <div class="col-md-offset-2">
            <small class="text-muted">Example: 916-555-5555</small>
        </div>
        <font color="red">
            @Html.ValidationMessageFor(model => model.PhoneNumber)
        </font>
    </div>
    @*Adding a label and a table containing a row of check boxes for user rights*@
    <div class="form-group">
        <div class="col-sm-3">
            <label>User Is Allowed to Alter:</label>
            <table class="table">
                <thead style="font-size: 12px">
                    <tr>
                        @*Table Headings*@
                        <th>
                            @Html.DisplayNameFor(model => model.Home)
                        </th>
                        <th>
                            @Html.DisplayNameFor(model => model.About_Us)
                        </th>
                        <th>
                            @Html.DisplayNameFor(model => model.Collaborations)
                        </th>
                        <th>
                            @Html.DisplayNameFor(model => model.MESA_Schools_Program)
                        </th>
                        <th>
                            @Html.DisplayNameFor(model => model.MESA_Community_College_Program)
                        </th>
                        <th>
                            @Html.DisplayNameFor(model => model.MESA_Engineering_Program)
                        </th>
                        <th>
                            @Html.DisplayNameFor(model => model.News)
                        </th>
                        <th>
                            @Html.DisplayNameFor(model => model.Donate)
                        </th>
                    </tr>
                </thead>
                @if (Model.AccountType.Equals("Director"))
                {
                    <tbody>
                        <tr>
                            <td>
                                @Html.CheckBoxFor(model => model.Home, new { @checked = "checked", @disabled = "disabled" })
                            </td>
                            <td>
                                @Html.CheckBoxFor(model => model.About_Us, new { @checked = "checked", @disabled = "disabled" })
                            </td>
                            <td>
                                @Html.CheckBoxFor(model => model.Collaborations, new { @checked = "checked", @disabled = "disabled" })
                            </td>
                            <td>
                                @Html.CheckBoxFor(model => model.MESA_Schools_Program, new { @checked = "checked", @disabled = "disabled" })
                            </td>
                            <td>
                                @Html.CheckBoxFor(model => model.MESA_Community_College_Program, new { @checked = "checked", @disabled = "disabled" })
                            </td>
                            <td>
                                @Html.CheckBoxFor(model => model.MESA_Engineering_Program, new { @checked = "checked", @disabled = "disabled" })
                            </td>
                            <td>
                                @Html.CheckBoxFor(model => model.News, new { @checked = "checked", @disabled = "disabled" })
                            </td>
                            <td>
                                @Html.CheckBoxFor(model => model.Donate, new { @checked = "checked", @disabled = "disabled" })
                            </td>
                        </tr>
                    </tbody>
                }
                @if (Model.AccountType.Equals("Staff"))
                {
                    <tbody>
                        <tr>
                            <td>
                                @Html.CheckBoxFor(model => model.Home)
                            </td>
                            <td>
                                @Html.CheckBoxFor(model => model.About_Us)
                            </td>
                            <td>
                                @Html.CheckBoxFor(model => model.Collaborations)
                            </td>
                            <td>
                                @Html.CheckBoxFor(model => model.MESA_Schools_Program)
                            </td>
                            <td>
                                @Html.CheckBoxFor(model => model.MESA_Community_College_Program)
                            </td>
                            <td>
                                @Html.CheckBoxFor(model => model.MESA_Engineering_Program)
                            </td>
                            <td>
                                @Html.CheckBoxFor(model => model.News)
                            </td>
                            <td>
                                @Html.CheckBoxFor(model => model.Donate)
                            </td>
                        </tr>
                    </tbody>
                }
            </table>
        </div>
    </div>
    @*Adding Username textfield*@
    <div class="form-group">
        @Html.LabelFor(model => model.Username, new { @class = "col-md-2 control-label" })
        @Html.TextBoxFor(model => model.Username, new { @class = "form-control", value = Model.Username })
        <div class="col-md-offset-2">
            <small class="text-muted">20 character limit.</small>
        </div>
        <font color="red">
            @Html.ValidationMessageFor(model => model.Username)
        </font>
    </div>
    @*Adding Password textfield*@
    <div class="form-group">
        @Html.LabelFor(model => model.Password, new { @class = "col-md-2 control-label" })
        @Html.PasswordFor(model => model.Password, new { @class = "form-control" })
        <div class="col-md-offset-2">
            <small class="text-muted">Please use a combination of letters, numbers, symbols. 20 character limit.</small>
        </div>
        <font color="red">
            @Html.ValidationMessageFor(model => model.Password)
        </font>
    </div>
    @*Adding Confirmation Password textfield*@
    <div class="form-group">
        @Html.LabelFor(model => model.ConfirmPassword, new { @class = "col-md-2 control-label" })
        @Html.PasswordFor(model => model.ConfirmPassword, new { @class = "form-control" })
        <font color="red">
            @Html.ValidationMessageFor(model => model.ConfirmPassword)
        </font>
    </div>
    @Html.HiddenFor(model => model.CurrentCenter);
    @Html.HiddenFor(model => model.CurrentUsername);
    @Html.HiddenFor(model => model.CurrentPassword);
    @*Adding add account button*@
    <div class="form-group">
        @if (ViewData["success"].Equals(true))
        {
            <button type="submit" class="btn btn-primary">Save</button>
        }
    </div>
}
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}